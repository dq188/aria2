name: Release

on:
  push:
    branches:
    - 'master'

jobs:

  Release_Drafter:
    name: Release_Drafter
    runs-on: ubuntu-latest
    steps:

    - name: Release Drafter
      # You may pin to the exact commit or the version.
      # uses: release-drafter/release-drafter@06d4616a80cd7c09ea3cf12214165ad6c1859e67
      id: create_release
      uses: release-drafter/release-drafter@v5.11.0
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: set upload_url
      id: set_upload_url
      uses: noobly314/share-data@v1
      with:
        share-id: release_url
        mode: set
        key: url
        value: ${{ steps.create_release.outputs.upload_url }}

  u-build:
    name: build_ubuntu
    needs: Release_Drafter
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Build
      run: |
        sudo apt-get install autopoint gettext 

        #c-ares
        rm -rf c-ares_git
        git clone --depth=1 https://github.com/c-ares/c-ares.git c-ares_git
        cd c-ares_git
        autoreconf -fi
        ./configure \
            --disable-shared \
            --enable-static \
            --without-random \
            --disable-tests 

        make
        sudo make install
        cd ../
        rm -rf c-ares_git
        #c-ares

        #expat
        rm -rf libexpat_git
        git clone --depth=1 https://github.com/libexpat/libexpat.git libexpat_git
        cd libexpat_git/expat
        ./buildconf.sh
        ./configure \
            --disable-shared \
            --enable-static 
        make
        sudo make install
        cd ../../
        rm -rf libexpat_git 
        #expat

        #libssh2
        rm -rf libssh2_git
        git clone --depth=1 https://github.com/libssh2/libssh2.git libssh2_git
        cd libssh2_git
        autoreconf -fi
        ./configure \
            --without-libgcrypt \
            --with-openssl \
            --without-wincng \
            --enable-static \
            --disable-shared
        make
        sudo make install
        cd ../
        rm -rf libssh2_git
        #libssh2

        #sql
        rm -rf sqlite_git
        git clone --depth=1 https://github.com/sqlite/sqlite.git sqlite_git
        cd sqlite_git
        ./configure \
            --disable-shared \
            --enable-static 
        make
        sudo make install
        cd ../
        rm -rf sqlite_git 
        #sql

        git clone --depth=1 https://github.com/aria2/aria2.git aria2_git
        cd aria2_git
        git apply ../patch/1.patch

        cat '/etc/ssl/certs/ca-certificates.crt' > /dev/null
        if [ "$?" -eq 0 ] ; then
          CRT='/etc/ssl/certs/ca-certificates.crt'
        else
          CRT='./certs/ca-certificates.crt'
        fi

        autoreconf -fi || autoreconf -fiv
        ./configure \
            --without-libxml2 \
            --without-libgcrypt \
            --with-openssl \
            --without-libnettle \
            --without-gnutls \
            --without-libgmp \
            --with-libssh2 \
            --with-sqlite3 \
            --with-ca-bundle=$CRT \
            ARIA2_STATIC=yes \
            --enable-shared=no

        make
        cd ../
        cp aria2_git/src/aria2c* ./
        rm -rf aria2_git
      
    - name: zip
      run: zip -q -r ubuntu.zip *
    
    - name: get upload_url
      id: get_upload_url
      uses: noobly314/share-data@v1
      with:
        share-id: release_url
        mode: get
        key: url

    - name: Upload a Release Asset
      uses: actions/upload-release-asset@v1.0.2
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        # The URL for uploading assets to the release
        upload_url: ${{ steps.get_upload_url.outputs.data }}
        # The path to the asset you want to upload
        asset_path: ./ubuntu.zip
        # The name of the asset you want to upload
        asset_name: ubuntu.zip
        # The content-type of the asset you want to upload. See the supported Media Types here: https://www.iana.org/assignments/media-types/media-types.xhtml for more information
        asset_content_type: application/zip

  w-build:
    name: build_windows
    needs: Release_Drafter
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Build
      run: |
        export packages=$(apt-cache search -n mingw-w64 | cut -d " " -f 1 | tr "\n" " ")
        export packages=$packages$(apt-cache search -n cppunit | cut -d " " -f 1 | tr "\n" " ")
        export packages=$packages$(apt-cache search -n expat | cut -d " " -f 1 | tr "\n" " ")
        export packages=$packages$(apt-cache search -n libssh2 | cut -d " " -f 1 | tr "\n" " ")
        export packages=$packages$(apt-cache search -n sqlite3 | cut -d " " -f 1 | tr "\n" " ")
        export packages=$packages$(apt-cache search -n autopoint | cut -d " " -f 1 | tr "\n" " ")
        export packages=$packages$(apt-cache search -n libc6-dev-amd64 | cut -d " " -f 1 | tr "\n" " ")

        sudo apt-get install $packages
        sudo apt-get install build-essential flex libelf-dev binutils-dev libdwarf-dev

        # #c-ares
        rm -rf c-ares_git
        git clone --depth=1 https://github.com/c-ares/c-ares.git c-ares_git
        cd c-ares_git
        autoreconf -fi
        ./configure \
            --disable-shared \
            --enable-static \
            --without-random \
            --disable-tests \
            --prefix=/usr/local/$HOST \
            --host=$HOST
        make
        sudo make install
        cd ../
        rm -rf c-ares_git
        # #c-ares

        git clone --depth=1 https://github.com/aria2/aria2.git aria2_git
        cd aria2_git
        git apply ../patch/1.patch

        autoreconf -fi
        export HOST=x86_64-w64-mingw32
        export PREFIX=/usr/local/$HOST
        
        # fix:
        # /usr/local/include/ares_build.h:86:12: fatal error: sys/socket.h: No such file or directory
        # or
        # /usr/include/x86_64-linux-gnu/sys/types.h:25:10: fatal error: features.h: No such file or directory
        # or
        # previous declaration
        sudo ln -s /usr/include/x86_64-linux-gnu/sys /usr/local/include/sys
        
        # fix:
        # configure: error: unknown endianness
        #   presetting ac_cv_c_bigendian=no (or yes) will help
        export ac_cv_c_bigendian=no

        echo 
        find /usr/include -name socket.h
        echo
        find /usr/include -name features.h
        echo

        ./configure \
            --host=$HOST \
            --prefix=$PREFIX \
            --without-included-gettext \
            --disable-nls \
            --with-libcares \
            --without-gnutls \
            --without-openssl \
            --with-sqlite3 \
            --without-libxml2 \
            --with-libexpat \
            --with-libz \
            --without-libgmp \
            --with-libssh2 \
            --without-libgcrypt \
            --without-libnettle \
            --with-cppunit-prefix=$PREFIX \
            CXXCPP=x86_64-w64-mingw32-g++ \
            CPP=x86_64-w64-mingw32-gcc \
            ARIA2_STATIC=yes \
            CPPFLAGS="-I$PREFIX/include -I/usr/include" \
            LDFLAGS="-L$PREFIX/lib" \
            PKG_CONFIG="/usr/bin/pkg-config" \
            PKG_CONFIG_PATH="$PREFIX/lib/pkgconfig"

        make
        cd ../
        cp aria2_git/src/aria2c* ./
        rm -rf aria2_git

    - name: zip
      run: zip -q -r windows.zip *
      
    - name: get upload_url
      id: get_upload_url
      uses: noobly314/share-data@v1
      with:
        share-id: release_url
        mode: get
        key: url

    - name: Upload a Release Asset
      uses: actions/upload-release-asset@v1.0.2
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        # The URL for uploading assets to the release
        upload_url: ${{ steps.get_upload_url.outputs.data }}
        # The path to the asset you want to upload
        asset_path: ./windows.zip
        # The name of the asset you want to upload
        asset_name: windows.zip
        # The content-type of the asset you want to upload. See the supported Media Types here: https://www.iana.org/assignments/media-types/media-types.xhtml for more information
        asset_content_type: application/zip
