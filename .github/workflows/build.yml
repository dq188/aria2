name: Release

on:
  push:
    branches:
    - 'master'

jobs:

  Release_Drafter:
    name: Release_Drafter
    runs-on: ubuntu-latest
    steps:

    - name: Release Drafter
      # You may pin to the exact commit or the version.
      # uses: release-drafter/release-drafter@06d4616a80cd7c09ea3cf12214165ad6c1859e67
      id: create_release
      uses: release-drafter/release-drafter@v5.11.0
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: set upload_url
      id: set_upload_url
      uses: noobly314/share-data@v1
      with:
        share-id: release_url
        mode: set
        key: url
        value: ${{ steps.create_release.outputs.upload_url }}

  u-build:
    name: build_ubuntu
    needs: Release_Drafter
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Env
      run: |
        # # fix:
        # # The following packages have unmet dependencies:...
        sudo apt-get install aptitude

        export packages=$packages$(apt-cache search -n libcppunit dev | cut -d " " -f 1 | tr "\n" " ")
        export packages=$packages$(apt-cache search -n libc6-dev-amd64 | cut -d " " -f 1 | tr "\n" " ")
        export packages=$packages$(apt-cache search -n libssl dev | cut -d " " -f 1 | tr "\n" " ")
        export packages=$packages$(apt-cache search -n libxml2 dev | cut -d " " -f 1 | tr "\n" " ")
        export packages=$packages$(apt-cache search -n zlib1g dev | cut -d " " -f 1 | tr "\n" " ")
        export packages=$packages$(apt-cache search -n libsqlite3 dev | cut -d " " -f 1 | tr "\n" " ")
        export packages=$packages$(apt-cache search -n expat | cut -d " " -f 1 | tr "\n" " ")
        export packages=$packages$(apt-cache search -n zlib | cut -d " " -f 1 | tr "\n" " ")
        export packages=$packages$(apt-cache search -n c-ares | cut -d " " -f 1 | tr "\n" " ")
        export packages=$packages$(apt-cache search -n mingw-w64 | cut -d " " -f 1 | tr "\n" " ")
        export packages=$packages$(apt-cache search -n dpkg-dev | cut -d " " -f 1 | tr "\n" " ")
        export packages=$packages$(apt-cache search -n pkg-config | cut -d " " -f 1 | tr "\n" " ")
        export packages=$packages$(apt-cache search -n openssl dev | cut -d " " -f 1 | tr "\n" " ")
        export packages=$packages$(apt-cache search -n nettle dev | cut -d " " -f 1 | tr "\n" " ")
        export packages=$packages$(apt-cache search -n gcrypt dev | cut -d " " -f 1 | tr "\n" " ")
        export packages=$packages$(apt-cache search -n gnutls dev | cut -d " " -f 1 | tr "\n" " ")

        sudo aptitude -y install $packages
        sudo aptitude -y install autopoint automake autotools-dev libtool gettext 
        sudo aptitude -y install build-essential libelf-dev binutils-dev libdwarf-dev gcc g++ git

    - name: Build
      run: |
        git clone --depth=1 https://github.com/aria2/aria2.git aria2_git
        cd aria2_git
        git apply ../patch/1.patch

        autoreconf -fi || autoreconf -fiv
        ./configure \
            --without-libxml2 \
            --without-libgcrypt \
            --without-libnettle \
            --without-gnutls \
            --without-libgmp \
            ARIA2_STATIC=yes \

        make
        cd ../
        cp aria2_git/src/aria2c* ./
        rm -rf aria2_git
      
    - name: zip
      run: zip -q -r ubuntu.zip *
    
    - name: get upload_url
      id: get_upload_url
      uses: noobly314/share-data@v1
      with:
        share-id: release_url
        mode: get
        key: url

    - name: Upload a Release Asset
      uses: actions/upload-release-asset@v1.0.2
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        # The URL for uploading assets to the release
        upload_url: ${{ steps.get_upload_url.outputs.data }}
        # The path to the asset you want to upload
        asset_path: ./ubuntu.zip
        # The name of the asset you want to upload
        asset_name: ubuntu.zip
        # The content-type of the asset you want to upload. See the supported Media Types here: https://www.iana.org/assignments/media-types/media-types.xhtml for more information
        asset_content_type: application/zip

  w-build:
    name: build_windows
    needs: Release_Drafter
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Env
      run: |
        # # fix:
        # # The following packages have unmet dependencies:...
        sudo apt-get install aptitude

        export packages=$packages$(apt-cache search -n libcppunit dev | cut -d " " -f 1 | tr "\n" " ")
        export packages=$packages$(apt-cache search -n libc6-dev-amd64 | cut -d " " -f 1 | tr "\n" " ")
        export packages=$packages$(apt-cache search -n libssl dev | cut -d " " -f 1 | tr "\n" " ")
        export packages=$packages$(apt-cache search -n libxml2 dev | cut -d " " -f 1 | tr "\n" " ")
        export packages=$packages$(apt-cache search -n zlib1g dev | cut -d " " -f 1 | tr "\n" " ")
        export packages=$packages$(apt-cache search -n libsqlite3 dev | cut -d " " -f 1 | tr "\n" " ")
        export packages=$packages$(apt-cache search -n expat | cut -d " " -f 1 | tr "\n" " ")
        export packages=$packages$(apt-cache search -n zlib | cut -d " " -f 1 | tr "\n" " ")
        export packages=$packages$(apt-cache search -n c-ares | cut -d " " -f 1 | tr "\n" " ")
        export packages=$packages$(apt-cache search -n mingw-w64 | cut -d " " -f 1 | tr "\n" " ")
        export packages=$packages$(apt-cache search -n dpkg-dev | cut -d " " -f 1 | tr "\n" " ")
        export packages=$packages$(apt-cache search -n pkg-config | cut -d " " -f 1 | tr "\n" " ")
        export packages=$packages$(apt-cache search -n openssl dev | cut -d " " -f 1 | tr "\n" " ")
        export packages=$packages$(apt-cache search -n nettle dev | cut -d " " -f 1 | tr "\n" " ")
        export packages=$packages$(apt-cache search -n gcrypt dev | cut -d " " -f 1 | tr "\n" " ")
        export packages=$packages$(apt-cache search -n gnutls dev | cut -d " " -f 1 | tr "\n" " ")

        sudo aptitude -y install $packages
        sudo aptitude -y install autopoint automake autotools-dev libtool gettext 
        sudo aptitude -y install build-essential libelf-dev binutils-dev libdwarf-dev gcc g++ git

    - name: Build
      run: |
        export HOST=x86_64-w64-mingw32
        export PREFIX=/usr/$HOST

        git clone --depth=1 https://github.com/aria2/aria2.git aria2_git
        cd aria2_git
        git apply ../patch/*
        autoreconf -i
        
        ./configure \
            --host=$HOST \
            --prefix=$PREFIX \
            ARIA2_STATIC=yes \
            CPPFLAGS="-I$PREFIX/include" \
            PKG_CONFIG_PATH="$PREFIX/lib/pkgconfig"

        make
        cd ../
        cp aria2_git/src/aria2c* ./
        rm -rf aria2_git

    - name: Zip
      run: zip -q -r windows.zip *
      
    - name: Get upload_url
      id: get_upload_url
      uses: noobly314/share-data@v1
      with:
        share-id: release_url
        mode: get
        key: url

    - name: Upload a Release Asset
      uses: actions/upload-release-asset@v1.0.2
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_upload_url.outputs.data }}
        asset_path: ./windows.zip
        asset_name: windows.zip
        asset_content_type: application/zip
