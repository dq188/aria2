diff --git a/src/HttpSkipResponseCommand.cc b/src/HttpSkipResponseCommand.cc
index a722d77..86647c2 100644
--- a/src/HttpSkipResponseCommand.cc
+++ b/src/HttpSkipResponseCommand.cc
@@ -202,6 +202,12 @@ bool HttpSkipResponseCommand::processResponse()
   }
 
   auto statusCode = httpResponse_->getStatusCode();
+  if (getOption()->getAsInt(PREF_RETRY_ON_CODE) < statusCode
+    && getOption()->getAsInt(PREF_RETRY_WAIT) > 0) {
+  throw DL_RETRY_EX2(fmt(EX_BAD_STATUS, statusCode),
+                      error_code::HTTP_PROTOCOL_ERROR);
+  }
+
   if (statusCode >= 400) {
     switch (statusCode) {
     case 401:
diff --git a/src/OptionHandlerFactory.cc b/src/OptionHandlerFactory.cc
index 6bff4ca..1cc9f5f 100644
--- a/src/OptionHandlerFactory.cc
+++ b/src/OptionHandlerFactory.cc
@@ -139,6 +139,16 @@ std::vector<OptionHandler*> OptionHandlerFactory::createOptionHandlers()
     op->setChangeOptionForReserved(true);
     handlers.push_back(op);
   }
+  {
+    OptionHandler* op(new NumberOptionHandler(
+        PREF_RETRY_ON_CODE, TEXT_RETRY_ON_CODE, "1000", 0, 1000));
+    op->addTag(TAG_ADVANCED);
+    op->addTag(TAG_HTTP);
+    op->setInitialOption(true);
+    op->setChangeGlobalOption(true);
+    op->setChangeOptionForReserved(true);
+    handlers.push_back(op);
+  }
   {
     OptionHandler* op(new BooleanOptionHandler(PREF_CONDITIONAL_GET,
                                                TEXT_CONDITIONAL_GET, A2_V_FALSE,
diff --git a/src/TrackerWatcherCommand.cc b/src/TrackerWatcherCommand.cc
index 960a377..ca76327 100644
--- a/src/TrackerWatcherCommand.cc
+++ b/src/TrackerWatcherCommand.cc
@@ -240,16 +240,16 @@ bool TrackerWatcherCommand::execute()
     // will get Segmentation fault.
     if (trackerRequest_->success()) {
       if (trackerRequest_->processResponse(btAnnounce_)) {
-        btAnnounce_->announceSuccess();
-        btAnnounce_->resetAnnounce();
+        // btAnnounce_->announceSuccess();
+        // btAnnounce_->resetAnnounce();
         addConnection();
       }
-      else {
+      // else {
         btAnnounce_->announceFailure();
         if (btAnnounce_->isAllAnnounceFailed()) {
           btAnnounce_->resetAnnounce();
         }
-      }
+      // }
       trackerRequest_.reset();
     }
     else {
@@ -372,9 +372,9 @@ TrackerWatcherCommand::createHTTPAnnRequest(const std::string& uri)
     A2_LOG_DEBUG("This is single-tracker announce.");
   }
   rg->setNumConcurrentCommand(1);
-  // If backup tracker is available, try 2 times for each tracker
+  // If backup tracker is available, try 1 times for each tracker
   // and if they all fails, then try next one.
-  option->put(PREF_MAX_TRIES, "2");
+  option->put(PREF_MAX_TRIES, "1");
   // TODO When dry-run mode becomes available in BitTorrent, set
   // PREF_DRY_RUN=false too.
   option->put(PREF_USE_HEAD, A2_V_FALSE);
diff --git a/src/WinConsoleFile.cc b/src/WinConsoleFile.cc
index 55268e5..7fffdc7 100644
--- a/src/WinConsoleFile.cc
+++ b/src/WinConsoleFile.cc
@@ -43,6 +43,8 @@
 #include "a2io.h"
 #include "util.h"
 
+typedef unsigned long DWORD;
+
 namespace {
 
 #define FOREGROUND_BLACK 0
diff --git a/src/WinConsoleFile.h b/src/WinConsoleFile.h
index ae899c9..491485a 100644
--- a/src/WinConsoleFile.h
+++ b/src/WinConsoleFile.h
@@ -40,6 +40,8 @@
 
 #include <string>
 
+typedef unsigned long DWORD;
+
 namespace aria2 {
 
 // This is a wrapper class for WriteConsoleW
diff --git a/src/prefs.cc b/src/prefs.cc
index fe98268..dd6f001 100644
--- a/src/prefs.cc
+++ b/src/prefs.cc
@@ -325,6 +325,8 @@ PrefPtr PREF_ENABLE_ASYNC_DNS6 = makePref("enable-async-dns6");
 // value: 1*digit
 PrefPtr PREF_MAX_DOWNLOAD_RESULT = makePref("max-download-result");
 // value: 1*digit
+PrefPtr PREF_RETRY_ON_CODE = makePref("retry-on-code");
+// value: 1*digit
 PrefPtr PREF_RETRY_WAIT = makePref("retry-wait");
 // value: string
 PrefPtr PREF_ASYNC_DNS_SERVER = makePref("async-dns-server");
diff --git a/src/prefs.h b/src/prefs.h
index 9719b3b..7457bc1 100644
--- a/src/prefs.h
+++ b/src/prefs.h
@@ -164,6 +164,8 @@ extern PrefPtr PREF_CONTINUE;
 // value:
 extern PrefPtr PREF_NO_NETRC;
 // value: 1*digit
+extern PrefPtr PREF_RETRY_ON_CODE;
+// value: 1*digit
 extern PrefPtr PREF_MAX_OVERALL_DOWNLOAD_LIMIT;
 // value: 1*digit
 extern PrefPtr PREF_MAX_DOWNLOADS;
diff --git a/src/usage_text.h b/src/usage_text.h
index ebf67e3..dda34da 100644
--- a/src/usage_text.h
+++ b/src/usage_text.h
@@ -34,7 +34,10 @@
 /* copyright --> */
 
 // clang-format off
-
+#define TEXT_RETRY_ON_CODE                                                 \
+  _(" --retry-on-code[=1000]  Configure whether retry or not when\n" \
+    "                              HTTP server returns StatusCode Above the Value.\n" \
+    "                              Only effective if retry-wait > 0.")
 #define TEXT_DIR                                                        \
   _(" -d, --dir=DIR                The directory to store the downloaded file.")
 #define TEXT_OUT                                                        \
